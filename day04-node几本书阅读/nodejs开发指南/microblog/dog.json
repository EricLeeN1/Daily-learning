{
    [Function: model
    ]
hooks: Kareem { _pres: {}, _posts: {}
    },
base:
Mongoose {
connections: [
            [Object
            ]
        ],
models: { Dog: [Circular
            ]
        },
modelSchemas: { Dog: [Object
            ]
        },
options: { pluralization: true
        },
plugins: [
            [Object
            ],
            [Object
            ],
            [Object
            ]
        ]
    },
modelName: 'Dog',
model: [Function: model
    ],
db:
NativeConnection {
base:
Mongoose {
connections: [Object
            ],
models: [Object
            ],
modelSchemas: [Object
            ],
options: [Object
            ],
plugins: [Object
            ]
        },
collections: { dogs: [Object
            ]
        },
models: { Dog: [Circular
            ]
        },
config: { autoIndex: true
        },
replica: false,
hosts: null,
host: '127.0.0.1',
port: 27018,
user: null,
pass: null,
name: 'dog',
options: null,
otherDbs: [],
states: { '0': 'disconnected',
'1': 'connected',
'2': 'connecting',
'3': 'disconnecting',
'4': 'unauthorized',
'99': 'uninitialized',
disconnected: 0,
connected: 1,
connecting: 2,
disconnecting: 3,
unauthorized: 4,
uninitialized: 99
        },
_readyState: 1,
_closeCalled: false,
_hasOpened: true,
_listening: false,
_connectionOptions: {},
_events: { error: [Function: bound bound
            ]
        },
_eventsCount: 1,
db:
Db {
domain: null,
_events: [Object
            ],
_eventsCount: 2,
_maxListeners: undefined,
s: [Object
            ],
serverConfig: [Getter
            ],
bufferMaxEntries: [Getter
            ],
databaseName: [Getter
            ]
        }
    },
discriminators: undefined,
'$appliedHooks': true,
_events: { init: [Function
        ], save: [Function
        ]
    },
_eventsCount: 2,
schema:
Schema {
obj: { name: [Function: String
            ],
age: [Function: Number
            ],
address: [Function: String
            ],
familyMember: [Object
            ],
birthDay: [Object
            ],
black: [Object
            ],
label: [Object
            ]
        },
paths: { name: [Object
            ],
age: [Object
            ],
address: [Object
            ],
familyMember: [Object
            ],
birthDay: [Object
            ],
black: [Object
            ],
'label.weight': [Object
            ],
'label.purity': [Object
            ],
'label.shape': [Object
            ],
_id: [Object
            ],
others: [Object
            ],
color: [Object
            ],
__v: [Object
            ]
        },
aliases: {},
subpaths: {},
virtuals: { id: [Object
            ]
        },
singleNestedPaths: {},
nested: { label: true
        },
inherits: {},
callQueue: [
            [Object
            ],
            [Object
            ],
            [Object
            ],
            [Object
            ],
            [Object
            ],
            [Object
            ]
        ],
_indexes: [],
methods: { speak: [Function
            ]
        },
statics: { findByNames: [Function
            ]
        },
tree: { name: [Function: String
            ],
age: [Function: Number
            ],
address: [Function: String
            ],
familyMember: [Object
            ],
birthDay: [Object
            ],
black: [Object
            ],
label: [Object
            ],
_id: [Object
            ],
others: [Function: String
            ],
color: [Function: String
            ],
__v: [Function: Number
            ],
id: [Object
            ]
        },
query: {},
childSchemas: [
            [Object
            ]
        ],
plugins: [
            [Object
            ],
            [Object
            ],
            [Object
            ],
            [Object
            ]
        ],
s: { hooks: [Object
            ], kareemHooks: [Object
            ]
        },
options: { retainKeyOrder: false,
typeKey: 'type',
id: true,
noVirtualId: false,
_id: true,
noId: false,
validateBeforeSave: true,
read: null,
shardKey: null,
autoIndex: null,
minimize: true,
discriminatorKey: '__t',
versionKey: '__v',
capped: false,
bufferCommands: true,
strict: true,
pluralization: true
        },
'$globalPluginsApplied': true,
_requiredpaths: []
    },
collection:
NativeCollection {
collection: Collection { s: [Object
            ]
        },
opts: { bufferCommands: true, capped: false
        },
name: 'dogs',
collectionName: 'dogs',
conn:
NativeConnection {
base: [Object
            ],
collections: [Object
            ],
models: [Object
            ],
config: [Object
            ],
replica: false,
hosts: null,
host: '127.0.0.1',
port: 27018,
user: null,
pass: null,
name: 'dog',
options: null,
otherDbs: [],
states: [Object
            ],
_readyState: 1,
_closeCalled: false,
_hasOpened: true,
_listening: false,
_connectionOptions: {},
_events: [Object
            ],
_eventsCount: 1,
db: [Object
            ]
        },
queue: [],
buffer: false,
emitter:
EventEmitter {
domain: null,
_events: {},
_eventsCount: 0,
_maxListeners: undefined
        }
    },
Query: {
        [Function
        ]
base:
Query {
toConstructor: [Function: toConstructor
            ],
setOptions: [Function
            ],
collection: [Function: collection
            ],
'$where': [Function
            ],
where: [Function
            ],
equals: [Function: equals
            ],
eq: [Function: eq
            ],
or: [Function: or
            ],
nor: [Function: nor
            ],
and: [Function: and
            ],
gt: [Function
            ],
gte: [Function
            ],
lt: [Function
            ],
lte: [Function
            ],
ne: [Function
            ],
in: [Function
            ],
nin: [Function
            ],
all: [Function
            ],
regex: [Function
            ],
size: [Function
            ],
maxDistance: [Function
            ],
minDistance: [Function
            ],
mod: [Function
            ],
exists: [Function
            ],
elemMatch: [Function
            ],
within: [Function: within
            ],
box: [Function
            ],
polygon: [Function
            ],
circle: [Function
            ],
near: [Function: near
            ],
intersects: [Function: intersects
            ],
geometry: [Function: geometry
            ],
select: [Function: select
            ],
slice: [Function
            ],
sort: [Function
            ],
limit: [Function
            ],
skip: [Function
            ],
maxScan: [Function
            ],
batchSize: [Function
            ],
comment: [Function
            ],
maxTime: [Function
            ],
snapshot: [Function
            ],
hint: [Function
            ],
slaveOk: [Function
            ],
read: [Function
            ],
tailable: [Function
            ],
merge: [Function
            ],
find: [Function
            ],
cursor: [Function: cursor
            ],
findOne: [Function
            ],
count: [Function
            ],
distinct: [Function
            ],
update: [Function: update
            ],
updateMany: [Function: updateMany
            ],
updateOne: [Function: updateOne
            ],
replaceOne: [Function: replaceOne
            ],
remove: [Function
            ],
deleteOne: [Function
            ],
deleteMany: [Function
            ],
findOneAndUpdate: [Function
            ],
findOneAndRemove: [Function
            ],
_findAndModify: [Function
            ],
_wrapCallback: [Function
            ],
setTraceFunction: [Function
            ],
exec: [Function: exec
            ],
thunk: [Function
            ],
then: [Function
            ],
stream: [Function
            ],
selected: [Function: selected
            ],
selectedInclusively: [Function: selectedInclusively
            ],
selectedExclusively: [Function: selectedExclusively
            ],
_mergeUpdate: [Function
            ],
_optionsForExec: [Function
            ],
_fieldsForExec: [Function
            ],
_updateForExec: [Function
            ],
_ensurePath: [Function
            ],
_validate: [Function
            ]
        }
    },
'$__insertMany': [Function
    ],
insertMany: [Function
    ]
}