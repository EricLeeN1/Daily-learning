mixin fundesc(name, use, description)
	.api__element__name #{name}
	.api__element__use #{use}
	.api__element__command_desc #{description}

mixin fundesc_transition_to_one
	.api__element
		+fundesc('@transitionToOne', '@transitionToOne({when: expr, start: val, end: val}, power)', 
				'Returns a value that starts at 0, when `expr` is lower than `start`, and approaches 1.0, when `expr` approaches `end`.')

		.api__element__returns
			.api__element__returns__element
				.api__element__returns__element__value 0
				.api__element__returns__element__when`expr` is lower than `start`

			.api__element__returns__element
				.api__element__returns__element__value (expr/val)^power
				.api__element__returns__element__when`expr` is higher than `start` but lower than `end`

			.api__element__returns__element
				.api__element__returns__element__value 1
				.api__element__returns__element__when`expr` is higher `end`

		.api__element_example 
			:markdown
				This snippet turns down opacity when scrolling position (`@win-scrollTop`) is
				reaching 400px. The transition follows an sqrt law (`power`=.5)

				```css
				.header {
					-dyn-opacity: '1-@transitionToOne({when : @win-scrollTop , start: 0, stop: 400 }, .5)';
				}
				```
	.api__hr

mixin fundesc_should_appear
	.api__element
		+fundesc('@shouldAppear', '@shouldAppear({when: expr, isHigherThan: val})', 
				'Returns a value that approaches 1.0 when expr approaches val.')

		.api__element__returns
			.api__element__returns__element
				.api__element__returns__element__value 0
				.api__element__returns__element__when`expr` is lower than 0

			.api__element__returns__element
				.api__element__returns__element__value expr/val
				.api__element__returns__element__when`expr` is higher than 0 but lower than `val`

			.api__element__returns__element
				.api__element__returns__element__value 1
				.api__element__returns__element__when`expr` is higher `val`

		.api__element_example 
			:markdown
				This snippet turns up element visibility when scrolling position (`@win-scrollTop`) is
				reaching a half of the window's height:

				```css
				.header {
					-dyn-opacity: '@shouldAppear({when: @win-scrollTop, isHigherThan: @win-height/2})';
				}
				```
		.api__element_variations 
			:markdown 
				Use `isLowerThan` instead of `isHigherThan`	to make elements appear on scroll up.
	.api__hr

mixin fundesc_should_disappear
	.api__element
		+fundesc('@shouldDisappear', '@shouldDisappear({when: expr, isHigherThan: val})', 'Returns a value that approaches 0.0 when expr approaches val.')

		.api__element__returns
			.api__element__returns__element
				.api__element__returns__element__value 1 
				.api__element__returns__element__when`expr` is lower than 0

			.api__element__returns__element
				.api__element__returns__element__value 1 - (expr/val)
				.api__element__returns__element__when`expr` is higher than 0 but lower than `val`

			.api__element__returns__element
				.api__element__returns__element__value 0
				.api__element__returns__element__when`expr` is higher `val`

		.api__element_example 
			:markdown
				This snippet turns down opacity when scrolling position (`@win-scrollTop`) is
				reaching a fourth of the window's height:

				```css
				.header {
					-dyn-opacity: '@shouldDisappear({when: @win-scrollTop, isHigherThan: @win-height/4})';
				}
				```
		.api__element_variations 
			:markdown 
				Use `isLowerThan` instead of `isHigherThan`	to make elements disappear on scroll up.
	.api__hr

mixin fundesc_select_from
	.api__element 
		+fundesc('@selectFrom', '@selectFrom(array)', 'Returns the element of `array` associated with the currently active breakpoint (i.e., the one with the same index).')

		.api__element_example 
			:markdown
				Here, we set the font size to 3em under the first breakpoint, 4em under the second, and 5em above the second.

				```css 
				.header__title {
					-dyn-font-size: '@selectFrom(["3em", "4em", "5em"])';
				}
				```

				Breakpoints should be set in Javascript by using the appropriate `setBreakpoints` method: 


				```html
				<script> 
					window.dynCss.api.setBreakpoints([321, 480],'@win-width');
				</script>
				```	
				
				sets two breakpoints at window's width (`@win-width`) equal to 320 and 480 pixels.

mixin fundesc_if
	.api__element 
		+fundesc('@if', '@if(condition, v1, v2)', 'Returns v1 if condition is true, v2 otherwise.')

		.api__element_example 
			:markdown
				Here, we remove the element when scroll-top is higher than its bottom.

				```css 
				.element-to-be-removed {
					-dyn-display: '@if(@win-scrollTop > @jq-offset.bottom, "none", "block")';
				}
				```

mixin fundesc_morph
	.api__element 
		+fundesc('@morph', '@morph(factor, v1, v2)', 'Returns the convex combination (1-factor)*v1 + factor*v2.')

		.api__element_example 
			:markdown
				`factor` can be the state of a transition. This snippet resizes the width of `.element` by using the state 
				returned by `@transitionToOne`. 

				```css 
				.element {
					-dyn-width: '@morph(transitionToOne(...), 200, 300)';
				}
				```


doctype html
html
	head(lang="en")
		title DynCSS - Simple dynamic CSS rules to give life to your sites.
		meta(http-equiv="content-type", content="text/html, charset=UTF-8")
		meta(name="description", content="")
		meta(name="keywords", content="")
		meta(name="viewport", content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=0")
		// if lt IE 9
			script(type="text/javascript", src="js/html5shiv.js")
		link(href="//netdna.bootstrapcdn.com/font-awesome/4.0.3/css/font-awesome.css", rel="stylesheet")
		link(rel="stylesheet", href="css/client.css", type="text/css")
		link(rel="stylesheet", href="css/vendor.css", type="text/css")
	body(style='opacity: 0;')
		//- BEM Rules.
		.overlay

		.toc 
			.toc__section.toc__section--what_is_it(onclick="location.href='#what-is-it';", style="cursor: pointer;") What is it 
			.toc__section.toc__section--features(onclick="location.href='#features';", style="cursor: pointer;") 	Features
			.toc__section.toc__section--responsiveness(onclick="location.href='#responsiveness';", style="cursor: pointer;") Responsiveness
			.toc__section.toc__section--dynamic-styles(onclick="location.href='#dynamic-styles';", style="cursor: pointer;") Dynamic styles 
			.toc__section.toc__section--api(onclick="location.href='#api';", style="cursor: pointer;") API

		.header
			.header__title
				strong Dyn
				|CSS
			.header__sub-title Simple, dynamic CSS rules to give life to your sites.

			.header__buttons
				a.header__button(onclick="location.href='https://github.com/vzaccaria/DynCSS'", style="cursor: pointer") Github
				a.header__button(onclick="location.href='#api';", style="cursor: pointer") Docs
				a.header__button(onclick="location.href='http://www.vittoriozaccaria.net/dyncss-example'", style="cursor: pointer") Example 

		.sub-header 
			.sub-header__actions 
			
				.sub-header__action 
					i.sub-header__action__icon.fa.fa-cloud-download
					.sub-header__action__text Install
					.sub-header__action__desc
						:markdown
							```shell
							$ bower install dyn-css
							```

				.sub-header__action 
					i.sub-header__action__icon.fa.fa-html5
					.sub-header__action__text Include
					.sub-header__action__desc
						:markdown
							```html
							...
							<script src='bower_components/dyn-css/dyncss.js'
															type='text/javascript' />
							...
							```
							
							Less than 20K, uncompressed and unminified. Requires only jQuery.


				.sub-header__action
					i.sub-header__action__icon.fa.fa-gamepad
					.sub-header__action__text Enjoy
					.sub-header__action__desc
						:markdown
							```css
							i.fa.fa-gamepad {
									-dyn-webkit-transform:   
												'"rotate(\#{@win-scrollTop}deg) "';
							}
							```

			.sub-header__container
				hr.sub-header__container__separator 

				#what-is-it.sub-header__container__short_desc
					:markdown
						# What is it? 

						DynCSS parses your CSS for `-dyn-(attribute)` rules. These 
						rules are Javascript expressions evaluated on browser's events like `scroll` and 
						`resize`. The result is applied to the CSS attribute you have specified as suffix.

						For example, this will 
						center vertically `.header`, dynamically changing `margin-top` as 
						the window is resized:

						```css 
						.header {
							-dyn-margin-top: '(@win-height - @el-height)/2.0';
						}
						```

						Here, `@win-height` is the dynamic height of the window and 
						`@el-height` is the dynamic height of the current element (`.header` in this case). The 
						header of this page has been centered in this way. 

						You can even create parallax effects by using the window's `scrollTop` and dynamically
						applying a CSS transform:

						```css 
						.header {
							-dyn-webkit-transform:   '"translate( 0px , \#{-1*@win-scrollTop}px) "';
						}	
						``` 

						Since the `webkit-transform` value is a string, the above snippet creates one 
						by interpolating the dynamic value with `\#{..}`. 

				#features.sub-header__container__short_desc
					:markdown

						# Features 

						You can make dynamic any CSS property â€” provided that it is writable
						by jQuery's `.css()` method. You do this by appending the `-dyn-` prefix and specifying
						a quoted Javascript expression.

						You can use placeholders to access dynamic information about the document;
						here's a list of built-in placeholders you can use: 

						| Prefixes | Description |
						|---|---|
						| `@win-foo` |  dynamically evaluates `window.foo()`|
						| `@el-foo` |  dynamically evaluates `$(current-selector).css(foo)` |
						| `@jq-foo` |  dynamically evaluates `$(current-selector).foo()` |
						
						The syntax should be parsable by any CSS preprocessor. For 
						example, I am using it with `lessc` for this website.

						# Custom functions 
						You can introduce custom functions to be evaluated at run-time,  by
						adding them to `window.dynCss.lib`. For example, here's how you can introduce 
						a center function that returns the centers of the current window:

						```css
						window.dynCss.lib.center = function() {
							return {x: window.width()/2, y: window.height()/2 };
						}
						```

						To use it in a rule, invoke it with the `@` prefix:

						```css
							-dyn-margin-left: '@center().x';
						```

						## Virtual properties - new 

						To enable more precise positioning of elements, the following dynamic properties
						of position=fixed elements have been introduced:

						| property name | affects |
						| ------------- | --------| 
						| -dyn-fixed-vertical-center | top | 
						| -dyn-fixed-horizontal-center | left |

						They take implicitly into account the size of the element in order to center it 
						horizontally; for example:

						```css
						.element {
							position: fixed;
							-dyn-fixed-vertical-center: '@fixedVerticalCenter(".element2")';
						}
						```
						will vertically align `.element` to `.element2` (another fixed element).


				#responsiveness.sub-header__container__short_desc
					:markdown

						# Responsiveness
						DynCSS allows to easily program responsiveness in your CSS. 
						To do so you define a list of breakpoints and 
						the dynamic variable to watch (which is typically the size of the window). You can do this in a `<script>` tag 
						in your HTML; here's how you set two breakpoints at 481 and 961 on the window's width 
						variable `@win-width`:

						```html
						<script> 
							window.dynCss.api.setBreakpoints([481,961],'@win-width');
						</script>
						```

						Now, you can define how each property behaves above an below the breakpoints;
						for example, we can change dynamically the font size:

						```css 
						.header__title {
								-dyn-font-size: '@selectFrom(["3em", "4em", "5em"])';
						}
						```	

						`selectFrom` is a built-in function that returns one of the elements of the input list 
						by using the breakpoints specified with `setBreakpoints`. 
						Here, the font size will be 3em under 480px, 4em under 960px, and 5em above 960px.

				#dynamic-styles.sub-header__container__short_desc
					:markdown

						# Dynamic styles 
						DynCSS allows to add a class dynamically to all elements of a given selector, based on 
						a condition to be evaluated at run-time; this is useful to build scroll spies.
						You can specify the class name to be added with `-dyn-set-state-(class-name)`:

						```css 
						.to-be-highlighted {
							-dyn-set-state-highlight: '@isVerticallyVisible("#my-section")';
						}

						```	
						here, we add a `.highlight` class to all elements `.to-be-highlighted` whenever the function
						`@isVerticallyVisible` returns true. We assume that `isVerticallyVisible` receives a selector 
						and checks whether it is in or out of the view port.

						Here's a custom definition of `isVerticallyVisible` in Livescript, but you can write your own of course:

						```livescript 

						isVerticallyVisible = (el, threshold) ->
							r         = jQuery(el)[0].getBoundingClientRect();
							w         = jQuery(window)
							vp        = {}
							vp.top    = w.scrollTop()
							vp.bottom = w.scrollTop() + w.height()
							if not threshold?
								threshold := w.height()/3
								value = 
								| r.top >= 0 and r.top < (threshold)   => true
								| r.top < 0 and r.bottom > (threshold) => true
								| otherwise                            => false

							return value 						

						```



				#api.sub-header__container__short_desc



					:markdown

						# API 

						Here are some built-in functions you can use in your `-dyn-*` rules:

					.sub-header__short_desc__api
						+fundesc_should_appear()
						+fundesc_should_disappear()
						+fundesc_select_from()
						+fundesc_transition_to_one()
						+fundesc_if()
						+fundesc_morph()

				

			.sub-header__footer 
				.sub-header__footer__container
					.sub-header__footer__madeby
						a.sub-header__footer__madeby__name_lastname(href='http://www.vittoriozaccaria.net') Vittorio Zaccaria


					a.sub-header__footer__license BSD 
					.sub-header__footer__share 
						#here-reddit.sub-header__footer__share__reddit 

						.sub-header__footer__share__twitter 
							a#here-twitter(href="https://twitter.com/share",class="twitter-share-button",data-count='vertical', data-via="_vzaccaria_") Tweet
						


		script(type="text/javascript", src="js/vendor.js")
		script(type="text/javascript", src="js/client.js")

		script.
			window.dynCss.api.setBreakpoints([481,961],'@win-width');

		script(src='//cdnjs.cloudflare.com/ajax/libs/highlight.js/8.0/highlight.min.js')
		script.
			hljs.initHighlightingOnLoad();                                      



		// if IE
			script(type="text/javascript", src="js/placeholder.js")